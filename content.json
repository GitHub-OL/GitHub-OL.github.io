{"meta":{"title":"爱编程-爱挑战-爱学习","subtitle":null,"description":"程序员就是我,我就是程序元","author":"TWei","url":"http://yoursite.com","root":"/"},"pages":[{"title":"categories","date":"2019-10-10T08:40:58.000Z","updated":"2019-10-10T08:41:21.127Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-10-10T08:40:06.000Z","updated":"2019-10-10T08:40:46.724Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"JavaScript基础","slug":"JavaScript基础","date":"2019-10-22T15:02:50.000Z","updated":"2019-10-22T15:03:20.739Z","comments":true,"path":"2019/10/22/JavaScript基础/","link":"","permalink":"http://yoursite.com/2019/10/22/JavaScript基础/","excerpt":"一.输出语句 向浏览器输出一个内容 alert() 向body中输出一个内容 document.write() 向控制台输出一个内容 console.log()","text":"一.输出语句 向浏览器输出一个内容 alert() 向body中输出一个内容 document.write() 向控制台输出一个内容 console.log() 二.编写位置 将JavaScript代码编写在标签的事件属性中 将JavaScript代码编写在超链接的href属性中 将JavaScript代码编写在script标签中 将JavaScript代码编写在外部JS文件中 三.基本语法 单行注释 // 多行注释 /**/ 文档注释 /***/ 四.字面量 字面量叫做literals 也叫做直接量 数字字面量:就是这个数字自己，并不需要任何的符号来界定这个数字. 字符串字面量:必须用双引号、单引号包裹起来 五.标志符 标志符可以有任意顺序的大小写字母,数字,下划线和美元符号$组成,但标志符不能以数字开头,不能是JavaScript中的关键字也叫保留字 六.数据类型 基本数据类型 数值型 Number 字符串型 String 布尔型 Boolean 空对象型 Null 未定义型 Undefined 对象数据类型 对象型 Object 函数型 Function 数组型 Array 数值型 所有数字(不分正负,不分整浮,不分大小,不分进制),Infinity(6/0),NaN( 0/0) 进制:二进制(0b/0B IE浏览器兼容),八进制(0/0o/0O),十进制,十六进制(0x/0X) 数字的最大值:Number.MAX_VALUE 数字的最小值:Number.MIN_VALUE 超过数字最大值是正无穷大Infinity Number.MAX_VALUE * Number.MAX_VALUE 两个或多个非纯数字字符串相乘是NaN 两个或多个浮点数运算得到的是不精确的值123456Infinity +-*/ 数字 //InfinityInfinity * Infinity //InfinityInfinity -/ Infinity //NaN6 / 0 //Infinity0 / 0 //NaNNaN / 8 //NaN 字符串型 空字符串 “” 空格字符串 “ “ 转义符 / 布尔型 布尔型只有两个值(字面量)即true/false,主要用来做逻辑判断 空对象型 空对象型只有一个值即null 类型是Object 未定义型 未定义型只有一个值即undefined,类型是Undefined–变量声明未赋值 undefined参与运算，结果都是NaN 七.强制类型转换 定义:将其他数据类型转换为Number/String/Boolean 将其他数据类型转换为Number 调用Number()函数 123456789101112String: 纯数字 数字 非纯数字 NaN 空字符串&quot;&quot; 0 空格字符串&quot; &quot; 0Boolean: true 1 false 0Null: null 0Undefined: undefined 0 有局限性:以数字开头的非纯数字字符串不能进行算数运算 调用parseInt()函数与parseFloat()函数 有局限性:对非String类型数据,需先将其转换为String,然后再操作 将其他数据类型转换为String 调用String()函数 调用toString()方法 有局限性:null和undefined这两个值没有toString方法 会报错 将其他数据类型转换为Boolean 调用Boolean()函数 1234567891011121314Number: 非零数字 true 0 false Infinity true NaN falseString: 非空字符串 true &quot;&quot; falseNull: null falseUndefined: undefined falseObject: object true 隐式类型转换:为任意的数据类型做两次非运算,即可将其转换为布尔值","categories":[],"tags":[]},{"title":"前端面试题汇总大全","slug":"前端面试题汇总大全","date":"2019-10-17T01:22:42.000Z","updated":"2019-10-17T01:25:26.286Z","comments":true,"path":"2019/10/17/前端面试题汇总大全/","link":"","permalink":"http://yoursite.com/2019/10/17/前端面试题汇总大全/","excerpt":"@[toc]一、HTML 篇 简述一下你对 HTML 语义化的理解？用正确的标签做正确的事情。html 语义化让页面的内容结构化，结构更清晰，便于对浏览器、搜索引擎解析；即使在没有样式 CSS 情况下也以一种文档格式显示，并且是容易阅读的;搜索引擎的爬虫也依赖于 HTML 标记来确定上下文和各个关键字的权重，利于 SEO;使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。 标签上 title 与 alt 属性的区别是什么？","text":"@[toc]一、HTML 篇 简述一下你对 HTML 语义化的理解？用正确的标签做正确的事情。html 语义化让页面的内容结构化，结构更清晰，便于对浏览器、搜索引擎解析；即使在没有样式 CSS 情况下也以一种文档格式显示，并且是容易阅读的;搜索引擎的爬虫也依赖于 HTML 标记来确定上下文和各个关键字的权重，利于 SEO;使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。 标签上 title 与 alt 属性的区别是什么？ alt 是给搜索引擎识别，在图像无法显示时的替代文本；title 是关于元素的注释信息，主要是给用户解读。当鼠标放到文字或是图片上时有 title 文字显示。（因为 IE 不标准）在 IE 浏览器中 alt 起到了 title 的作用，变成文字提示。在定义 img 对象时，将 alt 和 title 属性写全，可以保证在各种浏览器中都能正常使用。 iframe的优缺点？优点：解决加载缓慢的第三方内容如图标和广告等的加载问题Security sandbox并行加载脚本 缺点：iframe会阻塞主页面的Onload事件即使内容为空，加载也需要时间没有语意4. href 与 src？href (Hypertext Reference)指定网络资源的位置，从而在当前元素或者当前文档和由当前属性定义的需要的锚点或资源之间定义一个链接或者关系。（目的不是为了引用资源，而是为了建立联系，让当前标签能够链接到目标地址。）src source（缩写），指向外部资源的位置，指向的内容将会应用到文档中当前标签所在位置。href与src的区别1、请求资源类型不同：href 指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的联系。在请求 src 资源时会将其指向的资源下载并应用到文档中，比如 JavaScript 脚本，img 图片；2、作用结果不同：href 用于在当前文档和引用资源之间确立联系；src 用于替换当前内容；3、浏览器解析方式不同：当浏览器解析到src ，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，图片和框架等也如此，类似于将所指向资源应用到当前内容。这也是为什么建议把 js 脚本放在底部而不是头部的原因。 二、CSS 篇 介绍一下 CSS 的盒子模型？有两种， IE 盒子模型、W3C 盒子模型；盒模型：内容(content)、填充(padding)、边界(margin)、 边框(border)；区 别：IE 的 content 部分把 border 和 padding 计算了进去; css 选择器优先级？!important &gt; 行内样式（比重1000）&gt; ID 选择器（比重100） &gt; 类选择器（比重10） &gt; 标签（比重1） &gt; 通配符 &gt; 继承 &gt; 浏览器默认属性 垂直居中几种方式？单行文本: line-height = height图片: vertical-align: middle;absolute 定位: top: 50%;left: 50%;transform: translate(-50%, -50%);flex: display:flex;margin:auto 简明说一下 CSS link 与 @import 的区别和用法？link 是 XHTML 标签，除了加载CSS外，还可以定义 RSS 等其他事务；@import 属于 CSS 范畴，只能加载 CSS。link 引用 CSS 时，在页面载入时同时加载；@import 需要页面网页完全载入以后加载。link 是 XHTML 标签，无兼容问题；@import 是在 CSS2.1 提出的，低版本的浏览器不支持。link 支持使用 Javascript 控制 DOM 去改变样式；而@import不支持。 rgba和opacity的透明效果有什么不同？opacity 会继承父元素的 opacity 属性，而 RGBA 设置的元素的后代元素不会继承不透明属性。 display:none和visibility:hidden的区别？display:none 隐藏对应的元素，在文档布局中不再给它分配空间，它各边的元素会合拢，就当他从来不存在。visibility:hidden 隐藏对应的元素，但是在文档布局中仍保留原来的空间。 position的值， relative和absolute分别是相对于谁进行定位的？relative:相对定位，相对于自己本身在正常文档流中的位置进行定位。absolute:生成绝对定位，相对于最近一级定位不为static的父元素进行定位。fixed: （老版本IE不支持）生成绝对定位，相对于浏览器窗口或者frame进行定位。static:默认值，没有定位，元素出现在正常的文档流中。sticky:生成粘性定位的元素，容器的位置根据正常文档流计算得出。 三、HTML / CSS 混合篇 HTML5、CSS3 里面都新增了哪些新特性？HTML5新的语义标签article 独立的内容。aside 侧边栏。header 头部。nav 导航。section 文档中的节。footer 页脚。画布(Canvas) API地理(Geolocation) API本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失；sessionStorage 的数据在浏览器关闭后自动删除新的技术webworker, websocket, Geolocation拖拽释放(Drag and drop) API音频、视频API(audio,video)表单控件，calendar、date、time、email、url、searc CSS32d，3d变换Transition, animation媒体查询新的单位（rem, vw，vh 等）圆角（border-radius），阴影（box-shadow），对文字加特效（text-shadow），线性渐变（gradient），旋转（transform）transform:rotate(9deg) scale(0.85,0.90) translate(0px,-30px) skew(-9deg,0deg);//旋转,缩放,定位,倾斜rgba2. BFC 是什么？BFC 即 Block Formatting Contexts (块级格式化上下文)，它属于普通流，即：元素按照其在 HTML 中的先后位置至上而下布局，在这个过程中，行内元素水平排列，直到当行被占满然后换行，块级元素则会被渲染为完整的一个新行，除非另外指定，否则所有元素默认都是普通流定位，也可以说，普通流中元素的位置由该元素在 HTML 文档中的位置决定。可以把 BFC 理解为一个封闭的大箱子，箱子内部的元素无论如何翻江倒海，都不会影响到外部。只要元素满足下面任一条件即可触发 BFC 特性body 根元素浮动元素：float 除 none 以外的值绝对定位元素：position (absolute、fixed)display 为 inline-block、table-cells、flexoverflow 除了 visible 以外的值 (hidden、auto、scroll)3. 常见兼容性问题？浏览器默认的margin和padding不同。解决方案是加一个全局的*{margin:0;padding:0;}来统一。Chrome 中文界面下默认会将小于 12px 的文本强制按照 12px 显示,可通过加入 CSS 属性 -webkit-text-size-adjust: none; 解决. 四、JS 篇 JS 数据类型 ?数据类型主要包括两部分：基本数据类型：Undefined、Null、Boolean、Number 和 String引用数据类型：Object (包括 Object 、Array 、Function)ECMAScript 2015 新增:Symbol(创建后独一无二且不可变的数据类型 ) 判断一个值是什么类型有哪些方法？typeof 运算符instanceof 运算符Object.prototype.toString 方法 null 和 undefined 的区别？null 表示一个对象被定义了，值为“空值”；undefined 表示不存在这个值。（1）变量被声明了，但没有赋值时，就等于undefined。（2) 调用函数时，应该提供的参数没有提供，该参数等于undefined。（3）对象没有赋值的属性，该属性的值为undefined。（4）函数没有返回值时，默认返回undefined。 怎么判断一个变量arr的话是否为数组（此题用 typeof 不行）？arr instanceof Arrayarr.constructor == ArrayObject.protype.toString.call(arr) == ‘[Object Array]’ “ ===”、“ ==”的区别？==，当且仅当两个运算数相等时，它返回 true，即不检查数据类型===，只有在无需类型转换运算数就相等的情况下，才返回 true，需要检查数据类型 “eval是做什么的？它的功能是把对应的字符串解析成 JS 代码并运行；应该避免使用 eval，不安全，非常耗性能（2次，一次解析成 js 语句，一次执行）。 箭头函数有哪些特点？不需要function关键字来创建函数省略return关键字改变this指向 var、let、const 区别？var 存在变量提升。let 只能在块级作用域内访问。const 用来定义常量，必须初始化，不能修改（对象特殊） new操作符具体干了什么呢？1、创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。2、属性和方法被加入到 this 引用的对象中。3、新创建的对象由 this 所引用，并且最后隐式的返回 this 。 JSON 的了解？JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。它是基于JavaScript的一个子集。数据格式简单, 易于读写, 占用带宽小{‘age’:’12’, ‘name’:’back’} documen.write 和 innerHTML 的区别？document.write 只能重绘整个页面innerHTML 可以重绘页面的一部分 ajax过程？(1)创建XMLHttpRequest对象,也就是创建一个异步调用对象.(2)创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息.(3)设置响应HTTP请求状态变化的函数.(4)发送HTTP请求.(5)获取异步调用返回的数据.(6)使用JavaScript和DOM实现局部刷新. 请解释一下 JavaScript 的同源策略？概念:同源策略是客户端脚本（尤其是Netscape Navigator2.0，其目的是防止某个文档或脚本从多个不同源装载。这里的同源策略指的是：协议，域名，端口相同，同源策略是一种安全协议。指一段脚本只能读取来自同一来源的窗口和文档的属性。 介绍一下闭包和闭包常用场景？闭包是指有权访问另一个函数作用域中的变量的函数，创建闭包常见方式，就是在一个函数的内部创建另一个函数使用闭包主要为了设计私有的方法和变量，闭包的优点是可以避免变量的污染，缺点是闭包会常驻内存，会增大内存使用量，使用不当很容易造成内存泄露。在js中，函数即闭包，只有函数才会产生作用域的概念。闭包有三个特性：函数内部可以引用外部的参数和变量函数嵌套函数参数和变量不会被垃圾回收机制回收应用场景，设置私有变量的方法不适用场景：返回闭包的函数是个非常大的函数闭包的缺点就是常驻内存，会增大内存使用量，使用不当会造成内存泄漏 javascript的内存(垃圾)回收机制？垃圾回收器会每隔一段时间找出那些不再使用的内存，然后为其释放内存一般使用标记清除方法(mark and sweep), 当变量进入环境标记为进入环境，离开环境标记为离开环境垃圾回收器会在运行的时候给存储在内存中的所有变量加上标记，然后去掉环境中的变量以及被环境中变量所引用的变量（闭包），在这些完成之后仍存在标记的就是要删除的变量了还有引用计数方法(reference counting), 在低版本IE中经常会出现内存泄露，很多时候就是因为其采用引用计数方式进行垃圾回收。引用计数的策略是跟踪记录每个值被使用的次数，当声明了一个 变量并将一个引用类型赋值给该变量的时候这个值的引用次数就加1，如果该变量的值变成了另外一个，则这个值的引用次数减1，当这个值的引用次数变为0的时 候，说明没有变量在使用，这个值没法被访问了，因此可以将其占用的空间回收，这样垃圾回收器会在运行的时候清理掉引用次数为0的值占用的空间。在IE中虽然JavaScript对象通过标记清除的方式进行垃圾回收，但BOM与DOM对象却是通过引用计数回收垃圾的， 也就是说只要涉及BOM及DOM就会出现循环引用问题。 JavaScript原型，原型链 ? 有什么特点？每个对象都会在其内部初始化一个属性，就是prototype(原型)，当我们访问一个对象的属性时，如果这个对象内部不存在这个属性，那么他就会去prototype里找这个属性，这个prototype又会有自己的prototype，于是就这样一直找下去，也就是我们平时所说的原型链的概念。关系：instance.constructor.prototype = instance.proto特点：JavaScript对象是通过引用来传递的，我们创建的每个新对象实体中并没有一份属于自己的原型副本。当我们修改原型时，与之相关的对象也会继承这一改变。 五、Vue 篇 谈谈你对MVVM开发模式的理解？MVVM分为Model、View、ViewModel三者。Model 代表数据模型，数据和业务逻辑都在Model层中定义；View 代表UI视图，负责数据的展示；ViewModel 负责监听 Model 中数据的改变并且控制视图的更新，处理用户交互操作；Model 和 View 并无直接关联，而是通过 ViewModel 来进行联系的，Model 和 ViewModel 之间有着双向数据绑定的联系。因此当 Model 中的数据改变时会触发 View 层的刷新，View 中由于用户交互操作而改变的数据也会在 Model 中同步。这种模式实现了 Model 和 View 的数据自动同步，因此开发者只需要专注对数据的维护操作即可，而不需要自己操作 dom。 v-if 和 v-show 有什么区别？v-if 是真正的条件渲染，会控制这个 DOM 节点的存在与否。因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建；也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。v-show 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 的 “display” 属性进行切换。当我们需要经常切换某个元素的显示/隐藏时，使用v-show会更加节省性能上的开销；当只需要一次显示或隐藏时，使用v-if更加合理。 你使用过 Vuex 吗？Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。每一个 Vuex 应用的核心就是 store（仓库）。“store” 基本上就是一个容器，它包含着你的应用中大部分的状态 ( state )。（1）Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。（2）改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化。 主要包括以下几个模块：State =&gt; 基本数据，定义了应用状态的数据结构，可以在这里设置默认的初始状态。Getter =&gt; 从基本数据派生的数据，允许组件从 Store 中获取数据，mapGetters 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性。Mutation =&gt; 是唯一更改 store 中状态的方法，且必须是同步函数。Action =&gt; 像一个装饰器，包裹mutations，使之可以异步。用于提交 mutation，而不是直接变更状态，可以包含任意异步操作。Module =&gt; 模块化Vuex，允许将单一的 Store 拆分为多个 store 且同时保存在单一的状态树中。4. 说说你对 SPA 单页面的理解，它的优缺点分别是什么？SPA（ single-page application ）仅在 Web 页面初始化时加载相应的 HTML、JavaScript 和 CSS。一旦页&gt; 面加载完成，SPA 不会因为用户的操作而进行页面的重新加载或跳转；取而代之的是利用路由机制实现 &gt; HTML 内容的变换，UI 与用户的交互，避免页面的重新加载。优点：用户体验好、快，内容的改变不需要重新加载整个页面，避免了不必要的跳转和重复渲染；基于上面一点，SPA 相对对服务器压力小；前后端职责分离，架构清晰，前端进行交互逻辑，后端负责数据处理；缺点：初次加载耗时多：为实现单页 Web 应用功能及显示效果，需要在加载页面的时候将 JavaScript、CSS 统一&gt; 加载，部分页面按需加载；前进后退路由管理：由于单页应用在一个页面中显示所有的内容，所以不能使用浏览器的前进后退功能，所&gt; 有的页面切换需要自己建立堆栈管理；SEO 难度较大：由于所有的内容都在一个页面中动态替换显示，所以在 SEO 上其有着天然的弱势。5. Class 与 Style 如何动态绑定？Class 可以通过对象语法和数组语法进行动态绑定：对象语法： data: { isActive: true, hasError: false } 数组语法： data: { activeClass: 'active', errorClass: 'text-danger' } Style 也可以通过对象语法和数组语法进行动态绑定： 对象语法： data: { activeColor: 'red', fontSize: 30 } 数组语法： data: { styleColor: { color: 'red' }, styleSize:{ fontSize:'23px' } } 6. 怎样理解 Vue 的单向数据流？ 所有的 prop 都使得其父子 prop 之间形成了一个单向下行绑定：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。 这样会防止从子组件意外改变父级组件的状态，从而导致你的应用的数据流向难以理解。 额外的，每次父级组件发生更新时，子组件中所有的 prop 都将会刷新为最新的值。 这意味着你不应该在一个子组件内部改变 prop。如果你这样做了，Vue 会在浏览器的控制台中发出警告。 子组件想修改时，只能通过 $emit 派发一个自定义事件，父组件接收到后，由父组件修改。 7. computed 和 watch 的区别和运用的场景？ computed：是计算属性，依赖其它属性值，并且 computed 的值有缓存，只有它依赖的属性值发生改变，下一次获取 computed 的值时才会重新计算 computed 的值； watch：更多的是「观察」的作用，类似于某些数据的监听回调 ，每当监听的数据变化时都会执行回调进行后续操作； 运用场景： 当我们需要进行数值计算，并且依赖于其它数据时，应该使用 computed，因为可以利用 computed 的缓存特性，避免每次获取值时，都要重新计算； 当我们需要在数据变化时执行异步或开销较大的操作时，应该使用 watch，使用 watch 选项允许我们执行异步操作 ( 访问一个 API )，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。 8. 直接给一个数组项赋值，Vue 能检测到变化吗？ 由于 JavaScript 的限制，Vue 不能检测到以下数组的变动： 当你利用索引直接设置一个数组项时，例如：vm.items[indexOfItem] = newValue 当你修改数组的长度时，例如：vm.items.length = newLength 为了解决第一个问题，Vue 提供了以下操作方法： // Vue.set Vue.set(vm.items, indexOfItem, newValue) // vm.$set，Vue.set的一个别名 vm.$set(vm.items, indexOfItem, newValue) // Array.prototype.splice vm.items.splice(indexOfItem, 1, newValue) 为了解决第二个问题，Vue 提供了以下操作方法： // Array.prototype.splice vm.items.splice(newLength) 9. 谈谈你对 Vue 生命周期的理解？ 生命周期是什么？ Vue 实例有一个完整的生命周期，也就是从开始创建、初始化数据、编译模版、挂载 Dom -> 渲染、更新 -> 渲染、卸载等一系列过程，我们称这是 Vue 的生命周期。 各个生命周期的作用 | 生命周期 | 描述 | |--|--| | beforeCreate | 组件实例被创建之初，组件的属性生效之前 | | created | 组件实例已经完全创建，属性也绑定，但真实 dom 还没有生成，$el 还不可用 | | beforeMount | 在挂载开始之前被调用：相关的 render 函数首次被调用 | | mounted | el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子 | | beforeUpdate | 组件数据更新之前调用，发生在虚拟 DOM 打补丁之前 | | updated | 组件数据更新之后 | | activited | keep-alive 专属，组件被激活时调用 | | deadctivated | keep-alive 专属，组件被销毁时调用 | | beforeDestory | 组件销毁前调用 | | destoryed | 组件销毁后调用 | 10. Vue 的父组件和子组件生命周期钩子函数执行顺序？ Vue 的父组件和子组件生命周期钩子函数执行顺序可以归类为以下 4 部分： 加载渲染过程 : 父 beforeCreate -> 父 created -> 父 beforeMount -> 子 beforeCreate -> 子 created -> 子 beforeMount -> 子 mounted -> 父 mounted 子组件更新过程 : 父 beforeUpdate -> 子 beforeUpdate -> 子 updated -> 父 updated 父组件更新过程 : 父 beforeUpdate -> 父 updated 销毁过程 : 父 beforeDestroy -> 子 beforeDestroy -> 子 destroyed -> 父 destroyed 11. 父组件可以监听到子组件的生命周期吗？ 比如有父组件 Parent 和子组件 Child，如果父组件监听到子组件挂载 mounted 就做一些逻辑处理，可以通过以下写法实现： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143// Parent.vue// Child.vuemounted() &#123;this.$emit(&quot;mounted&quot;);&#125;&gt; 以上需要手动通过 $emit 触发父组件的事件，更简单的方式可以在父组件引用子组件时通过 @hook 来监听即可，如下所示：// Parent.vuedoSomething() &#123;console.log(&apos;父组件监听到 mounted 钩子函数 ...&apos;);&#125;,// Child.vuemounted()&#123;console.log(&apos;子组件触发 mounted 钩子函数 ...&apos;);&#125;,// 以上输出顺序为：// 子组件触发 mounted 钩子函数 ...// 父组件监听到 mounted 钩子函数 ...&gt; 当然 @hook 方法不仅仅是可以监听 mounted，其它的生命周期事件，例如：created，updated 等都可以监听。### 12. 谈谈你对 keep-alive 的了解？&gt; keep-alive 是 Vue 内置的一个组件，可以使被包含的组件保留状态，避免重新渲染 ，其有以下特性：&gt; - 一般结合路由和动态组件一起使用，用于缓存组件；&gt; - 提供 include 和 exclude 属性，两者都支持字符串或正则表达式， include 表示只有名称匹配的组件会被缓存，exclude 表示任何名称匹配的组件都不会被缓存 ，其中 exclude 的优先级比 include 高；&gt; - 对应两个钩子函数 activated 和 deactivated ，当组件被激活时，触发钩子函数 activated，当组件被移除时，触发钩子函数 deactivated。### 13. 组件中 data 为什么是一个函数？- **为什么组件中的 data 必须是一个函数，然后 return 一个对象，而 new Vue 实例里，data 可以直接是一个对象？**&gt; - 因为组件是用来复用的，且 JS 里对象是引用关系，如果组件中 data 是一个对象，那么这样作用域没有隔离，子组件中的 data 属性值会相互影响，&gt; - 如果组件中 data 选项是一个函数，那么每个实例可以维护一份被返回对象的独立的拷贝，组件实例之间的 data 属性值不会互相影响；而 new Vue 的实例，是不会被复用的，因此不存在引用对象的问题。### 14. v-model 的原理？&gt; 我们在 vue 项目中主要使用 v-model 指令在表单 input、textarea、select 等元素上创建双向数据绑定，我们知道 v-model 本质上不过是语法糖，v-model 在内部为不同的输入元素使用不同的属性并抛出不同的事件：&gt; - text 和 textarea 元素使用 value 属性和 input 事件；&gt; - checkbox 和 radio 使用 checked 属性和 change 事件；&gt; - select 字段将 value 作为 prop 并将 change 作为事件。- 以 input 表单元素为例：相当于如果在自定义组件中，v-model 默认会利用名为 value 的 prop 和名为 input 的事件，如下所示：父组件：子组件：&#123;&#123;value&#125;&#125;props:&#123;value: String&#125;,methods: &#123;test1()&#123;this.$emit(&apos;input&apos;, &apos;小红&apos;)&#125;,&#125;,### 15. Vue 组件间通信有哪几种方式？Vue 组件间通信是面试常考的知识点之一，这题有点类似于开放题，你回答出越多方法当然越加分，表明你对 Vue 掌握的越熟练。&gt; Vue 组件间通信只要指以下 3 类通信：父子组件通信、隔代组件通信、兄弟组件通信，下面我们分别介绍每种通信方式且会说明此种方法可适用于哪类组件间通信。&gt; **（1）```props / $emit ```适用 父子组件通信**&gt; - 这种方法是 Vue 组件的基础，相信大部分同学耳闻能详，所以此处就不举例展开介绍。&gt; &gt; **（2）```ref ```与 ```$parent / $children```适用 父子组件通信**&gt; - ```ref```：如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例&gt; - ```$parent / $children```：访问父 / 子实例&gt; &gt; **（3）```EventBus （$emit / $on）```适用于 父子、隔代、兄弟组件通信**&gt; - 这种方法通过一个空的 Vue 实例作为中央事件总线（事件中心），用它来触发事件和监听事件，从而实现任何组件间的通信，包括父子、隔代、兄弟组件。&gt; &gt; **（4）```$attrs/$listeners```适用于 隔代组件通信**&gt; - ```$attrs```：包含了父作用域中不被 prop 所识别 (且获取) 的特性绑定 ( class 和 style 除外 )。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 ( class 和 style 除外 )，并且可以通过 ```v-bind=&quot;$attrs&quot; ```传入内部组件。通常配合 inheritAttrs 选项一起使用。&gt; - ```$listeners```：包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。它可以通过 ```v-on=&quot;$listeners&quot; ```传入内部组件&gt;&gt; **（5）```provide / inject```适用于 隔代组件通信**&gt; - 祖先组件中通过 provider 来提供变量，然后在子孙组件中通过 inject 来注入变量。```provide / inject API ```主要解决了跨级组件间的通信问题，不过它的使用场景，主要是子组件获取上级组件的状态，跨级组件间建立了一种主动提供与依赖注入的关系。&gt;&gt; **（6）```Vuex```适用于 父子、隔代、兄弟组件通信**&gt; - Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。每一个 Vuex 应用的核心就是 store（仓库）。“store” 基本上就是一个容器，它包含着你的应用中大部分的状态 ( state )。&gt; - Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。&gt; - 改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化。### 16. 使用过 Vue SSR 吗？说说 SSR？&gt; - Vue.js 是构建客户端应用程序的框架。默认情况下，可以在浏览器中输出 Vue 组件，进行生成 DOM 和操作 DOM。然而，也可以将同一个组件渲染为服务端的 HTML 字符串，将它们直接发送到浏览器，最后将这些静态标记&quot;激活&quot;为客户端上完全可交互的应用程序。&gt; - 即：SSR大致的意思就是vue在客户端将标签渲染成的整个 html 片段的工作在服务端完成，服务端形成的html 片段直接返回给客户端这个过程就叫做服务端渲染。&gt; ---&gt; **服务端渲染 SSR 的优缺点如下：**&gt; - （1）服务端渲染的优点：&gt; - 更好的 SEO：因为 SPA 页面的内容是通过 Ajax 获取，而搜索引擎爬取工具并不会等待 Ajax 异步完成后再抓取页面内容，所以在 SPA 中是抓取不到页面通过 Ajax 获取到的内容；而 SSR 是直接由服务端返回已经渲染好的页面（数据已经包含在页面中），所以搜索引擎爬取工具可以抓取渲染好的页面；&gt; - 更快的内容到达时间（首屏加载更快）：SPA 会等待所有 Vue 编译后的 js 文件都下载完成后，才开始进行页面的渲染，文件下载等需要一定的时间等，所以首屏渲染需要一定的时间；SSR 直接由服务端渲染好页面直接返回显示，无需等待下载 js 文件及再去渲染等，所以 SSR 有更快的内容到达时间；&gt; - （2) 服务端渲染的缺点：&gt; - 更多的开发条件限制：例如服务端渲染只支持 beforCreate 和 created 两个钩子函数，这会导致一些外部扩展库需要特殊处理，才能在服务端渲染应用程序中运行；并且与可以部署在任何静态文件服务器上的完全静态单页面应用程序 SPA 不同，服务端渲染应用程序，需要处于 Node.js server 运行环境；&gt; - 更多的服务器负载：在 Node.js 中渲染完整的应用程序，显然会比仅仅提供静态文件的 server 更加大量占用CPU 资源 (CPU-intensive - CPU 密集)，因此如果你预料在高流量环境 ( high traffic ) 下使用，请准备相应的服务器负载，并明智地采用缓存策略。### 17. vue-router 路由模式有几种？&gt; vue-router 有 3 种路由模式：hash、history、abstract，对应的源码如下所示：switch (mode) &#123;case &apos;history&apos;:this.history = new HTML5History(this, options.base)breakcase &apos;hash&apos;:this.history = new HashHistory(this, options.base, this.fallback)breakcase &apos;abstract&apos;:this.history = new AbstractHistory(this, options.base)breakdefault:if (process.env.NODE_ENV !== &apos;production&apos;) &#123;assert(false, invalid mode: $&#123;mode&#125;)&#125;&#125;&gt; 其中，3 种路由模式的说明如下：&gt; - hash: 使用 URL hash 值来作路由。支持所有浏览器，包括不支持 HTML5 History Api 的浏览器；&gt; - history : 依赖 HTML5 History API 和服务器配置。具体可以查看 HTML5 History 模式；&gt; - abstract : 支持所有 JavaScript 运行环境，如 Node.js 服务器端。如果发现没有浏览器的 API，路由会自动强制进入这个模式.### 18. 能说下 vue-router 中常用的 hash 和 history 路由模式实现原理吗？&gt; （1）hash 模式的实现原理&gt; 早期的前端路由的实现就是基于 location.hash 来实现的。其实现原理很简单，location.hash 的值就是 URL 中 # 后面的内容。比如下面这个网站，它的 location.hash 的值为 &apos;#search&apos;：```https://www.word.com#searchhash 路由模式的实现主要是基于下面几个特性：URL 中 hash 值只是客户端的一种状态，也就是说当向服务器端发出请求时，hash 部分不会被发送；hash 值的改变，都会在浏览器的访问历史中增加一个记录。因此我们能通过浏览器的回退、前进按钮控制hash 的切换；可以通过 a 标签，并设置 href 属性，当用户点击这个标签后，URL 的 hash 值会发生改变；或者使用 JavaScript 来对 loaction.hash 进行赋值，改变 URL 的 hash 值；我们可以使用 hashchange 事件来监听 hash 值的变化，从而对页面进行跳转（渲染）。--------------------------------------------------------------------------------（2）history 模式的实现原理HTML5 提供了 History API 来实现 URL 的变化。其中做最主要的 API 有以下两个：history.pushState() 和 history.repalceState()。这两个 API 可以在不进行刷新的情况下，操作浏览器的历史纪录。唯一不同的是，前者是新增一个历史记录，后者是直接替换当前的历史记录，如下所示：window.history.pushState(null, null, path);window.history.replaceState(null, null, path);history 路由模式的实现主要基于存在下面几个特性：pushState 和 repalceState 两个 API 来操作实现 URL 的变化 ；我们可以使用 popstate 事件来监听 url 的变化，从而对页面进行跳转（渲染）；history.pushState() 或 history.replaceState() 不会触发 popstate 事件，这时我们需要手动触发页面跳转（渲染）。19. Vue 框架怎么实现对象和数组的监听？Vue 数据双向绑定主要是指：数据变化更新视图，视图变化更新数据。即：输入框内容变化时，Data 中的数据同步变化。即 View =&gt; Data 的变化。Data 中的数据变化时，文本节点的内容同步变化。即 Data =&gt; View 的变化。其中，View 变化更新 Data ，可以通过事件监听的方式来实现，所以 Vue 的数据双向绑定的工作主要是如何根据 Data 变化更新 View。Vue 主要通过以下 4 个步骤来实现数据双向绑定的：实现一个监听器 Observer：对数据对象进行遍历，包括子属性对象的属性，利用 Object.defineProperty() 对属性都加上 setter 和 getter。这样的话，给这个对象的某个值赋值，就会触发 setter，那么就能监听到了数据变化。实现一个解析器 Compile：解析 Vue 模板指令，将模板中的变量都替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，调用更新函数进行数据更新。实现一个订阅者 Watcher：Watcher 订阅者是 Observer 和 Compile 之间通信的桥梁 ，主要的任务是订阅 Observer 中的属性值变化的消息，当收到属性值变化的消息时，触发解析器 Compile 中对应的更新函数。实现一个订阅器 Dep：订阅器采用 发布-订阅 设计模式，用来收集订阅者 Watcher，对监听器 Observer 和 订阅者 Watcher 进行统一管理。20. Vue 是如何实现数据双向绑定的？如果被问到 Vue 怎么实现数据双向绑定，大家肯定都会回答 通过 Object.defineProperty() 对数据进行劫持，但是 Object.defineProperty() 只能对属性进行数据劫持，不能对整个对象进行劫持。同理无法对数组进行劫持，但是我们在使用 Vue 框架中都知道，Vue 能检测到对象和数组（部分方法的操作）的变化，那它是怎么实现的呢？我们查看相关代码如下： /**Observe a list of Array items./observeArray (items: Array) {for (let i = 0, l = items.length; i &lt; l; i++) {observe(items[i]) // observe 功能为监测数据的变化}}/*对属性进行递归遍历*/let childOb = !shallow &amp;&amp; observe(val) // observe 功能为监测数据的变化 通过以上 Vue 源码部分查看，我们就能知道 Vue 框架是通过遍历数组 和递归遍历对象，从而达到利用 Object.defineProperty() 也能对对象和数组（部分方法的操作）进行监听。 21. Vue 怎么用 vm.$set() 解决对象新增属性不能响应的问题 ？ 受现代 JavaScript 的限制 ，Vue 无法检测到对象属性的添加或删除。 由于 Vue 会在初始化实例时对属性执行 getter/setter 转化，所以属性必须在 data 对象上存在才能让 Vue 将它转换为响应式的。 但是 Vue 提供了 Vue.set (object, propertyName, value) / vm.$set (object, propertyName, value)来实现为对象添加响应式属性，那框架本身是如何实现的呢？ 我们查看对应的 Vue 源码：vue/src/core/instance/index.js export function set (target: Array&lt;any&gt; | Object, key: any, val: any): any { // target 为数组 if (Array.isArray(target) &amp;&amp; isValidArrayIndex(key)) { // 修改数组的长度, 避免索引&gt;数组长度导致splcie()执行有误 target.length = Math.max(target.length, key) // 利用数组的splice变异方法触发响应式 target.splice(key, 1, val) return val } // key 已经存在，直接修改属性值 if (key in target &amp;&amp; !(key in Object.prototype)) { target[key] = val return val } const ob = (target: any).__ob__ // target 本身就不是响应式数据, 直接赋值 if (!ob) { target[key] = val return val } // 对属性进行响应式处理 defineReactive(ob.value, key, val) ob.dep.notify() return val } 我们阅读以上源码可知，vm.$set 的实现原理是： 如果目标是数组，直接使用数组的 splice 方法触发相应式； 如果目标是对象，会先判读属性是否存在、对象是否是响应式，最终如果要对属性进行响应式处理，则是通过调用 defineReactive 方法进行响应式处理（ defineReactive 方法就是 Vue 在初始化对象时，给对象属性采用 Object.defineProperty 动态添加 getter 和 setter 的功能所调用的方法） 22. 虚拟 DOM 的优缺点？ 优点： 保证性能下限：框架的虚拟 DOM 需要适配任何上层 API 可能产生的操作，它的一些 DOM 操作的实现必须是普适的，所以它的性能并不是最优的；但是比起粗暴的 DOM 操作性能要好很多，因此框架的虚拟 DOM 至少可以保证在你不需要手动优化的情况下，依然可以提供还不错的性能，即保证性能的下限； 无需手动操作 DOM：我们不再需要手动去操作 DOM，只需要写好 View-Model 的代码逻辑，框架会根据虚拟 DOM 和 数据双向绑定，帮我们以可预期的方式更新视图，极大提高我们的开发效率； 跨平台：虚拟 DOM 本质上是 JavaScript 对象,而 DOM 与平台强相关，相比之下虚拟 DOM 可以进行更方便地跨平台操作，例如服务器渲染、weex 开发等等。 缺点: 无法进行极致优化：虽然虚拟 DOM + 合理的优化，足以应对绝大部分应用的性能需求，但在一些性能要求极高的应用中虚拟 DOM 无法进行针对性的极致优化。 23. 虚拟 DOM 实现原理？ 虚拟 DOM 的实现原理主要包括以下 3 部分： 用 JavaScript 对象模拟真实 DOM 树，对真实 DOM 进行抽象； diff 算法 — 比较两棵虚拟 DOM 树的差异； pach 算法 — 将两个虚拟 DOM 对象的差异应用到真正的 DOM 树。 24. Vue 中的 key 有什么作用？ key 是为 Vue 中 vnode 的唯一标记，通过这个 key，我们的 diff 操作可以更准确、更快速。 Vue 的 diff 过程可以概括为：oldCh 和 newCh 各有两个头尾的变量 oldStartIndex、oldEndIndex 和 newStartIndex、newEndIndex，它们会新节点和旧节点会进行两两对比，即一共有4种比较方式：newStartIndex 和oldStartIndex 、newEndIndex 和 oldEndIndex 、newStartIndex 和 oldEndIndex 、newEndIndex 和 oldStartIndex，如果以上 4 种比较都没匹配，如果设置了key，就会用 key 再进行比较，在比较的过程中，遍历会往中间靠，一旦 StartIdx &gt; EndIdx 表明 oldCh 和 newCh 至少有一个已经遍历完了，就会结束比较。 所以 Vue 中 key 的作用是：key 是为 Vue 中 vnode 的唯一标记，通过这个 key，我们的 diff 操作可以更准确、更快速! 更准确：因为带 key 就不是就地复用了，在 sameNode 函数 a.key === b.key 对比中可以避免就地复用的情况。所以会更加准确。 更快速：利用 key 的唯一性生成 map 对象来获取对应节点，比遍历方式更快，源码如下： function createKeyToOldIdx (children, beginIdx, endIdx) { let i, key const map = {} for (i = beginIdx; i &lt;= endIdx; ++i) { key = children[i].key if (isDef(key)) map[key] = i } return map } 25. 你有对 Vue 项目进行哪些优化？ （1）代码层面的优化 v-if 和 v-show 区分使用场景 computed 和 watch 区分使用场景 v-for 遍历必须为 item 添加 key，且避免同时使用 v-if 长列表性能优化 事件的销毁 图片资源懒加载 路由懒加载 第三方插件的按需引入 优化无限列表性能 服务端渲染 SSR or 预渲染 -------------------------------------------------------------------------------- （2）Webpack 层面的优化 Webpack 对图片进行压缩 减少 ES6 转为 ES5 的冗余代码 提取公共代码 模板预编译 提取组件的 CSS 优化 SourceMap 构建结果输出分析 Vue 项目的编译优化 -------------------------------------------------------------------------------- （3）基础的 Web 技术的优化 开启 gzip 压缩 浏览器缓存 CDN 的使用 使用 Chrome Performance 查找性能瓶颈 26. 对于 vue3.0 特性你有什么了解的吗？ Vue 3.0 的目标是让 Vue 核心变得更小、更快、更强大，因此 Vue 3.0 增加以下这些新特性： （1）监测机制的改变 3.0 将带来基于代理 Proxy 的 observer 实现，提供全语言覆盖的反应性跟踪。这消除了 Vue 2 当中基于 Object.defineProperty 的实现所存在的很多限制： 只能监测属性，不能监测对象 检测属性的添加和删除； 检测数组索引和长度的变更； 支持 Map、Set、WeakMap 和 WeakSet。 新的 observer 还提供了以下特性： 用于创建 observable 的公开 API。这为中小规模场景提供了简单轻量级的跨组件状态管理解决方案。 默认采用惰性观察。在 2.x 中，不管反应式数据有多大，都会在启动时被观察到。如果你的数据集很大，这可能会在应用启动时带来明显的开销。在 3.x 中，只观察用于渲染应用程序最初可见部分的数据。 更精确的变更通知。在 2.x 中，通过 Vue.set 强制添加新属性将导致依赖于该对象的 watcher 收到变更通知。在 3.x 中，只有依赖于特定属性的 watcher 才会收到通知。 不可变的 observable：我们可以创建值的“不可变”版本（即使是嵌套属性），除非系统在内部暂时将其“解禁”。这个机制可用于冻结 prop 传递或 Vuex 状态树以外的变化。 更好的调试功能：我们可以使用新的 renderTracked 和 renderTriggered 钩子精确地跟踪组件在什么时候以及为什么重新渲染。 （2）模板 模板方面没有大的变更，只改了作用域插槽，2.x 的机制导致作用域插槽变了，父组件会重新渲染，而 3.0 把作用域插槽改成了函数的方式，这样只会影响子组件的重新渲染，提升了渲染的性能。 同时，对于 render 函数的方面，vue3.0 也会进行一系列更改来方便习惯直接使用 api 来生成 vdom 。 （3）对象式的组件声明方式 vue2.x 中的组件是通过声明的方式传入一系列 option，和 TypeScript 的结合需要通过一些装饰器的方式来做，虽然能实现功能，但是比较麻烦。 3.0 修改了组件的声明方式，改成了类式的写法，这样使得和 TypeScript 的结合变得很容易。 此外，vue 的源码也改用了 TypeScript 来写。其实当代码的功能复杂之后，必须有一个静态类型系统来做一些辅助管理。 现在 vue3.0 也全面改用 TypeScript 来重写了，更是使得对外暴露的 api 更容易结合 TypeScript。静态类型系统对于复杂代码的维护确实很有必要。 （4）其它方面的更改 vue3.0 的改变是全面的，上面只涉及到主要的 3 个方面，还有一些其他的更改： 支持自定义渲染器，从而使得 weex 可以通过自定义渲染器的方式来扩展，而不是直接 fork 源码来改的方式。 支持 Fragment（多个根节点）和 Protal（在 dom 其他部分渲染组建内容）组件，针对一些特殊的场景做了处理。 基于 treeshaking 优化，提供了更多的内置功能。 -------------------------------------------------------------------------------- 六、其他杂项篇 1. 常见的浏览器内核有哪些？ 主要分成两部分：渲染引擎(layout engineer或Rendering Engine)和JS引擎。 渲染引擎：负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入CSS等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核。 JS引擎则：解析和执行javascript来实现网页的动态效果。 最开始渲染引擎和JS引擎并没有区分的很明确，后来JS引擎越来越独立，内核就倾向于只指渲染引擎。 常见内核 Trident 内核：IE, MaxThon, TT, The World, 360, 搜狗浏览器等。[又称 MSHTML] Gecko 内核：Netscape6 及以上版本，FF, MozillaSuite / SeaMonkey 等 Presto 内核：Opera7 及以上。[Opera内核原为：Presto，现为：Blink;] Webkit 内核：Safari, Chrome等。[ Chrome的：Blink（WebKit 的分支）] 2. 网页前端性能优化的方式有哪些？ 1.压缩 css, js, 图片 2.减少 http 请求次数， 合并 css、js 、合并图片（雪碧图） 3.使用 CDN 4.减少 dom 元素数量 5.图片懒加载 6.静态资源另外用无 cookie 的域名 7.减少 dom 的访问（缓存 dom） 8.巧用事件委托 9.样式表置顶、脚本置低 3. 网页从输入网址到渲染完成经历了哪些过程？ 大致可以分为如下7步： 输入网址； 发送到DNS服务器，并获取域名对应的web服务器对应的ip地址； 与web服务器建立TCP连接； 浏览器向web服务器发送http请求； web服务器响应请求，并返回指定url的数据（或错误信息，或重定向的新的url地址）； 浏览器下载web服务器返回的数据及解析html源文件； 生成DOM树，解析css和js，渲染页面，直至显示完成； 4. 线程与进程的区别？ 一个程序至少有一个进程,一个进程至少有一个线程. 线程的划分尺度小于进程，使得多线程程序的并发性高。 另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。 线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。 从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别。 5. HTTP常见的状态码？ 100 Continue 继续，一般在发送post请求时，已发送了http header之后服务端将返回此信息，表示确认，之后发送具体参数信息 200 OK 正常返回信息 201 Created 请求成功并且服务器创建了新的资源 202 Accepted 服务器已接受请求，但尚未处理 301 Moved Permanently 请求的网页已永久移动到新位置。 302 Found 临时性重定向。 303 See Other 临时性重定向，且总是使用 GET 请求新的 URI。 304 Not Modified 自从上次请求后，请求的网页未修改过。 400 Bad Request 服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。 401 Unauthorized 请求未授权。 403 Forbidden 禁止访问。 404 Not Found 找不到如何与 URI 相匹配的资源。 500 Internal Server Error 最常见的服务器端错误。 503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）。 6. 图片懒加载？ 当页面滚动的时间被触发 -&gt; 执行加载图片操作 -&gt; 判断图片是否在可视区域内 -&gt; 在，则动态将data-src的值赋予该图片 7. 移动端性能优化？ 尽量使用css3动画，开启硬件加速 适当使用touch时间代替click时间 避免使用css3渐变阴影效果 可以用transform: translateZ(0) 来开启硬件加速 不滥用float。float在渲染时计算量比较大，尽量减少使用 不滥用web字体。web字体需要下载，解析，重绘当前页面 合理使用requestAnimationFrame动画代替setTimeout css中的属性（css3 transitions、css3 3D transforms、opacity、webGL、video）会触发GUP渲染，耗电 8. TCP 传输的三次握手、四次挥手策略 三次握手： 为了准确无误地吧数据送达目标处，TCP协议采用了三次握手策略。用TCP协议把数据包送出去后，TCP不会对传送后的情况置之不理，他一定会向对方确认是否送达，握手过程中使用TCP的标志：SYN和ACK 发送端首先发送一个带SYN的标志的数据包给对方 接收端收到后，回传一个带有SYN/ACK标志的数据包以示传达确认信息 最后，发送端再回传一个带ACK的标志的数据包，代表“握手”结束 如在握手过程中某个阶段莫明中断，TCP协议会再次以相同的顺序发送相同的数据包 -------------------------------------------------------------------------------- 断开一个TCP连接需要“四次挥手” 第一次挥手：主动关闭方发送一个FIN，用来关注主动方到被动关闭方的数据传送，也即是主动关闭方告诫被动关闭方：我已经不会再给你发数据了（在FIN包之前发送的数据，如果没有收到对应的ACK确认报文，主动关闭方依然会重发这些数据）。但是，此时主动关闭方还可以接受数据 第二次挥手：被动关闭方收到FIN包后，发送一个ACK给对方，确认序号收到序号 +1（与SYN相同，一个 FIN占用一个序号） 第三次挥手：被动关闭方发送一个 FIN。用来关闭被动关闭方到主动关闭方的数据传送，也就是告诉主动关闭方，我的数据也发送完了，不会给你发送数据了 第四次挥手：主动关闭方收到FIN后，发送一个ACK给被动关闭方，确认序号为收到序号+1，至此，完成四次挥手 9. HTTP 和 HTTPS，为什么HTTPS安全？ HTTP协议通常承载与 TCP协议之上，在HTTP和TCP之间添加一个安全协议层（SSL或TSL），这个时候，就成了我们常说的HTTPS 默认HTTP的端口号为80，HTTPS的端口号为443 因为网络请求需要中间有很多的服务器路由的转发，中间的节点都可能篡改信息，而如果使用HTTPS，密钥在你和终点站才有，https之所有说比http安全，是因为他利用ssl/tls协议传输。包含证书，流量转发，负载均衡，页面适配，浏览器适配，refer传递等，保障了传输过程的安全性 -------------------------------------------------------------------------------- 七、主观题篇 1. 你都做过什么项目呢？具体聊某一个项目中运用的技术. 注意：用心找自己做的项目中自己感觉最拿出来手的（复杂度最高，用的技术最多的项目），描述的时候尽可能往里面添加一些技术名词 布局我们用html5+css3 我们会用reset.css重置浏览器的默认样式 JS框架的话我们选用的是jQuery(也可能是Zepto) 我们用版本控制工具git来协同开发 我们会基于gulp搭建的前端自动化工程来开发（里面包含有我们的项目结构、我们需要引用的第三方库等一些信息，我们还实现了sass编译、CSS3加前缀等的自动化） 我们的项目中还用到了表单验证validate插件、图片懒加载Lazyload插件 2. 你遇到过比较难的技术问题是？你是如何解决的？ 3. 常使用的库有哪些？常用的前端开发工具？开发过什么应用或组件？ 4. 除了前端以外还了解什么其它技术么？你最最厉害的技能是什么？ 5. 对前端开发工程师这个职位是怎么样理解的？它的前景会怎么样？ 前端是最贴近用户的程序员，比后端、数据库、产品经理、运营、安全都近。 1、实现界面交互 2、提升用户体验 3、有了Node.js，前端可以实现服务端的一些事情 前端是最贴近用户的程序员，前端的能力就是能让产品从 90分进化到 100 分，甚至更好， 参与项目，快速高质量完成实现效果图，精确到1px； 与团队成员，UI设计，产品经理的沟通； 做好的页面结构，页面重构和用户体验； 处理hack，兼容、写出优美的代码格式； 针对服务器的优化、拥抱最新前端技术。 6. 你的优点是什么？缺点是什么？","categories":[],"tags":[]},{"title":"03CSS定位","slug":"03CSS定位","date":"2019-10-15T15:33:34.000Z","updated":"2019-10-15T15:34:31.830Z","comments":true,"path":"2019/10/15/03CSS定位/","link":"","permalink":"http://yoursite.com/2019/10/15/03CSS定位/","excerpt":"一.CSS定位元素定位属性主要包括:定位模式和边偏移两部分 1.定位模式语法:display:static|relative|absolute|fixed static 自动定位（默认定位方式） relative 相对定位，相对于其原文档流的位置进行定位 absolute 绝对定位，相对于其上一个已经定位的父元素进行定位 fixed 固定定位，相对于浏览器窗口进行定位","text":"一.CSS定位元素定位属性主要包括:定位模式和边偏移两部分 1.定位模式语法:display:static|relative|absolute|fixed static 自动定位（默认定位方式） relative 相对定位，相对于其原文档流的位置进行定位 absolute 绝对定位，相对于其上一个已经定位的父元素进行定位 fixed 固定定位，相对于浏览器窗口进行定位 2.边偏移 top 顶端偏移量，定义元素相对于其父元素上边线的距离 bottom 底部偏移量，定义元素相对于其父元素下边线的距离 left 左侧偏移量，定义元素相对于其父元素左边线的距离 right 右侧偏移量，定义元素相对于其父元素右边线的距离 二.定位的分类1.静态定位 参考对象:HTML文档流中默认的位置 边偏移属性无效 2.相对定位 参考对象:元素原先在文档流中的位置 相对定位最重要的一点是，它可以通过边偏移移动位置，但是原来的所占的位置，继续占有 每次移动的位置，是以自己的左上角为基点移动（相对于自己来移动位置） 相对定位的盒子仍在标准流中，它后面的盒子仍以标准流方式对待它。（相对定位不脱标） 3.绝对定位 参考对象:最近的祖先定位元素/浏览器窗口 通过边偏移移动位置，完全脱标，完全不占位置 跟随文档滚动而滚动,子绝父相 绝对定位水平居中左右margin:auto无效 转换为行内-块级元素 left:50% (父元素宽度的一半) margin-left:-(本元素宽度/2) 4.固定定位 参考对象:浏览器可视窗口 固定定位的元素跟父亲没有任何关系，只认浏览器可视窗口 固定定位完全脱标，不占有位置，不随滚动条滚动而滚动 固定定位一定要写宽、高，除非有内容撑开, IE6等低版本浏览器不支持固定定位 转换为行内-块级元素 三.层级1.层级设置方法 给盒子一个CSS定位（除静态定位都可以) 设置盒子z-index：xxx;的值 只有相对定位，绝对定位，固定定位有此属性，其余标准流，浮动，静态定位都无此属性，亦不可指定此属性。 2.层级比较盒子层级：标准流&lt;浮动流&lt;定位流 不给层级的时候默认层级为0 层级为0的盒子比浮动的和标准流的高 层级为负数的盒子比浮动的和标准流的低，层级不能为小数。 层级一样后面的盒子比前面的高。 标准流中的文字比浮动盒子层级高。","categories":[],"tags":[]},{"title":"三种隐藏元素方法的区别","slug":"三种隐藏元素方法的区别","date":"2019-10-15T08:47:42.000Z","updated":"2019-10-15T08:49:35.557Z","comments":true,"path":"2019/10/15/三种隐藏元素方法的区别/","link":"","permalink":"http://yoursite.com/2019/10/15/三种隐藏元素方法的区别/","excerpt":"display:none 元素在页面上将消失,不占据页面空间,会导致浏览器的回流与重绘,不能响应交互类事件；","text":"display:none 元素在页面上将消失,不占据页面空间,会导致浏览器的回流与重绘,不能响应交互类事件； visibility:hidden 元素在页面占据的空间不变,所以它只会导致浏览器重绘而不会回流,也不能响应交互类事件； opacity:0 元素在页面占据的空间不变，不会导致浏览器回流或重绘（因为浏览器对于transform和opacity这两种变化处理的方法为合成渲染,可以响应交互类事件。","categories":[],"tags":[]},{"title":"02CSS浮动","slug":"02CSS浮动","date":"2019-10-15T08:47:22.000Z","updated":"2019-10-15T08:49:00.635Z","comments":true,"path":"2019/10/15/02CSS浮动/","link":"","permalink":"http://yoursite.com/2019/10/15/02CSS浮动/","excerpt":"一.CSS浮动是什么?css浮动就是浮动元素会脱离文档的普通流,根据float的值向左或向右移动,直到它的外边界碰到父元素的内边界或另一个浮动元素的外边界为止 1.相关概念 标准文档流:普通流/文档流 脱标:脱离标准流 CSS中一共有三种脱标手段:","text":"一.CSS浮动是什么?css浮动就是浮动元素会脱离文档的普通流,根据float的值向左或向右移动,直到它的外边界碰到父元素的内边界或另一个浮动元素的外边界为止 1.相关概念 标准文档流:普通流/文档流 脱标:脱离标准流 CSS中一共有三种脱标手段: 浮动 绝对定位 固定定位 网页布局的三种流 文档流 浮动流 定位流 二.浮动1.浮动API语法： float : none | left | right none:元素不浮动 left:元素向左浮动 right:元素向右浮动 2.浮动规则 浮动元素位于文档流之上,会遮挡文档流 如果同为浮动元素,会从左向右/从右向左,自上而下依次排列,会被高度高的浮动元素卡住 如果上一个元素为文档流中的元素,浮动元素的相对垂直位置不变,与文档流元素底部对齐(浮动元素不会超过它前边未进行浮动元素的底部) 浮动流只有一种排版方式,就是水平排版,它只能设置某个元素左对齐或者右对齐,在浮动流中是不可以使用margin: 0 auto; 如果同一行中左右浮动都存在,位置不够时,右浮动元素的后边元素会向下排列,左浮动先会保持不变,只有当宽度容不下左浮动元素的宽度,左浮动元素才会向下移动 3.浮动特性 元素浮动以后变成行内块元素 元素浮动以后后边如果是行内元素或者行内-块级元素(两者视为文本),浮动元素不会遮挡文本 元素浮动以后后边如果块级元素(里面包含文本)/块级元素内部包含行内元素或者行内-块级元素,浮动元素不会遮挡文本 三.清除浮动1.清除浮动API语法： clear : none | left | right | both none:允许两边有浮动元素 left:不允许左边有浮动元素 right:不允许右边有浮动元素 both:不允许两边有浮动元素(左边|右边|两边) 2.清除浮动规则 只能作用于块级元素或浮动元素 浮动只能影响调用它的元素 清除浮动不能作用域行内/行内-块级元素,因为浮动元素不会遮挡行内/行内-块级元素","categories":[],"tags":[]},{"title":"01标准文档流","slug":"01标准文档流","date":"2019-10-15T08:47:05.000Z","updated":"2019-10-15T15:34:05.885Z","comments":true,"path":"2019/10/15/01标准文档流/","link":"","permalink":"http://yoursite.com/2019/10/15/01标准文档流/","excerpt":"HTML元素分类 块级元素 独占一行,自上向下排列 默认宽度为父元素的100% 默认高度被内容撑开 可设置高/宽/内边距/外边距","text":"HTML元素分类 块级元素 独占一行,自上向下排列 默认宽度为父元素的100% 默认高度被内容撑开 可设置高/宽/内边距/外边距 行内元素 和其他非块级元素在同一行 只占自身大小,从左到右,自上向下排列 宽度和高度被内容撑开 不可设置高/宽/上下内边距/上下外边距 行内-块级元素即置换元素 和其他非块级元素在同一行 从左到右,自上向下排列 可设置高/宽/内边距/外边距 注意事项 行内元素:设置上下内边距,显示效果是增加了,只不过是表象,设置是无效的,对周围元素无任何影响,但设置背景会覆盖周围元素 行内块级元素:设置行高会影响同行相同元素类型的行高,与其保持一致 行内元素/行内-块级元素:进行页面布局的时候会把空的文本节点计算在内 置换元素:是指浏览器根据元素的标签和属性，来决定元素的具体显示内容,可以设置高宽/内外边距,性质同设置了display:inline-block的元素一致。而img元素虽然是行内元素 但它也是置换元素 html中的img,input,textarea,select,object都是置换元素，这些置换元素往往没有实际内容，即是一个空元素。 例如：浏览器根据img标签的src属性显示图片。根据input标签的type属性决定显示输入框还是按钮 非置换元素:浏览器中的大多数元素都是不可置换元素，即其内容直接展示给浏览器 h1~h6/p/dt元素:只能包含行内元素，不能再包含块级元素 块级元素和行内元素的嵌套规范(规则) 行内元素可以嵌套行内元素,不可以嵌套块级元素 块级元素,可以嵌套块级元素,或者是行内元素 部分块级元素,不能嵌套块级元素,只能嵌套行内元素,如:p、h1-h6、dt(p是真正的不能,其余的是规范的问题) 块级元素中嵌套的元素,块级元素和块级元素一级,行内元素和行内元素一级 HTML元素转换API语法： display : none | block | inline | inline-block none:此元素不会被显示(隐藏渲染) block:此元素将显示为块级元素 inline:此元素将显示为行内元素 inline-block:此元素将显示为行内-块级元素","categories":[],"tags":[]},{"title":"Vue之深入响应式原理","slug":"Vue之深入响应式原理","date":"2019-10-13T02:41:02.000Z","updated":"2019-10-13T02:46:10.014Z","comments":true,"path":"2019/10/13/Vue之深入响应式原理/","link":"","permalink":"http://yoursite.com/2019/10/13/Vue之深入响应式原理/","excerpt":"理解Vue响应式原理,只需通过解决以下几个问题即可 如何实现数据劫持? 如何实现数据代理?(如何对this.xxx的访问代理到this.data.xxx上?) 如何实现数据编译? 如何实现发布订阅模式? 如何实现更新视图?(如何监听数据的读写操作?如何实现数据修改DOM更新?) 如何实现双向数据绑定? 如何实现依赖缓存? template改变的时候,如何清理依赖项集合?eg:v-if和组件销毁","text":"理解Vue响应式原理,只需通过解决以下几个问题即可 如何实现数据劫持? 如何实现数据代理?(如何对this.xxx的访问代理到this.data.xxx上?) 如何实现数据编译? 如何实现发布订阅模式? 如何实现更新视图?(如何监听数据的读写操作?如何实现数据修改DOM更新?) 如何实现双向数据绑定? 如何实现依赖缓存? template改变的时候,如何清理依赖项集合?eg:v-if和组件销毁 前提1234567891011121314151617&lt;div id=&quot;app&quot;&gt; &lt;div id=&quot;app&quot;&gt; &lt;p&gt;&#123;&#123; a.a &#125;&#125;&lt;/p&gt; &lt;span&gt;&#123;&#123; b &#125;&#125;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;script&gt;const vm = new Mvvm(&#123; el: &apos;#app&apos;, data: &#123; a: &#123; a: &apos;我是a&apos; &#125;, b: &apos;我是b&apos; &#125; &#125;)&lt;/script&gt; 问题:如何实现数据劫持答:通过Object.defineProperty()方法,对data中的属性,在访问或者修改对象的其中某个属性时,通过一段代码拦截这个行为,进行额外的操作或者修改返回结果 12345678910111213141516171819202122232425262728293031323334353637// TODO:1.定义Mvvm类function Mvvm(options=&#123;&#125;)&#123; // TODO:this代表的是fade实例对象 // TODO:将所有属性挂载到$options this.$options = options var data = this._data = this.options.data // TODO:调用数据劫持 observe(data)&#125;// TODO:3.观察者function Observe(obj)&#123; for (let key in obj) &#123; let val = obj[key] // TODO:深度劫持 observe(val) Object.defineProperty(obj,key,&#123; enumerable : true, get()&#123; return val &#125;, set(newVal)&#123; if (newVal === val) return val = newVal // TODO:深度劫持 observe(newVal) &#125; &#125;) &#125;&#125;// TODO:2.数据劫持-使每个对象都具有get和set方法function observe(vmData)&#123; if (typeof data !== &apos;object&apos;) return return new Observe(vmData)&#125; 问题:如何实现数据代理-如何对this.xxx的访问代理到this.data.xxx上?答:对于每个data上的属性,都在app上做一个代理,实际操作的是this.data实现的代码如下: 1234567891011121314151617181920function Mvvm(options = &#123;&#125;) &#123; // TODO:this代表的是zhufeng实例对象 // TODO:将所有属性挂载到$options this.$options = options //this._data var data = this._data = this.$options.data observe(data) // TODO:4.数据代理 for (let key in data) &#123; Object.defineProperty(this,key,&#123; enumerable : true, get()&#123; return this._data[key] &#125;, set(newVal)&#123; this._data[key] = newVal &#125; &#125;) &#125;&#125; 问题:如何实现数据编译答:通过获取vm管理DOM的根节点,让其在内存中完成相关的正则匹配工作,替换DOM中的文本节点 123456789101112131415161718192021222324252627282930// TODO:5数据编译function Compile(el,vm)&#123; vm.$el = document.querySelector(el) let fragment = document.createDocumentFragment() while (child = vm.$el.firstChild) &#123; fragment.appendChild(child) &#125; replace(fragment) // TODO:6.数据替换 function replace(frag)&#123; Array.from(frag.childNodes).forEach(function (node) &#123; let text = node.textContent let regExp = /\\&#123;\\&#123;(.*)\\&#125;\\&#125;/ if (node.nodeType === 1 &amp;&amp; regExp.test(text)) &#123; let arr = RegExp.$1.trim().split(&apos;.&apos;) let val = vm arr.forEach(function (k) &#123; val = val[k] &#125;) node.textContent = text.replace(regExp,val).trim() &#125; if (node.childNodes &amp;&amp; node.childNodes.length) &#123; replace(node) &#125; &#125;) &#125; vm.$el.appendChild(fragment)&#125; 12345function Mvvm(options = &#123;&#125;) &#123; .... // TODO:进行编译 new Compile(optionns.el,this)&#125; 问题:如何实现发布订阅模式答:发布订阅主要靠的就是数组关系，订阅就是放入函数，发布就是让数组里的函数执行 12345678910111213141516171819202122// TODO:8.发布订阅模式// TODO:桥梁function Dep()&#123; // 桥梁 this.subs = [] // 订阅事件池&#125;// TODO:进行订阅的方法(往里面扔函数)Dep.property.addSub = function (sub) &#123; //sub就是watcher this.subs.push(sub)&#125;// TODO:进行发布/通知的方法(让函数的每一项一次执行)Dep.prototype.notify = function () &#123; this.subs.forEach(sub =&gt; sub.update())//绑定的事件,都有一个update属性&#125;// TODO:订阅者function Watcher(fn)&#123; //Watcher是一个类,通过这个类创建的实例都拥有update方法 this.fn = fn&#125;Watcher.prototype.update = function () &#123; //调用fn() this.fn()&#125; 问题:如何更新视图-当数据改变需要重新刷新视图答:现在我们要订阅一个事件，当数据改变需要重新刷新视图，这就需要在replace替换的逻辑里来处理通过new Watcher把数据订阅一下，数据一变就执行改变内容的操作 监听变化 123456789101112131415// TODO:6.数据替换 function replace(frag) &#123; ... node.textContent = text.replace(regExp, val).trim() // TODO:监听变化 new Watcher(vm,RegExp.$1,function (newVal) &#123; node.textContent = text.replace(regExp,newVal).trim() &#125;) if (node.childNodes &amp;&amp; node.childNodes.length) &#123; replace(node) &#125; ... &#125; 重写Watcher构造函数 1234567891011121314// TODO:订阅者function Watcher(vm,exp,fn)&#123; //Watcher是一个类,通过这个类创建的实例都拥有update方法 this.fn = fn this.vm = vm this.exp = exp Dep.target = this let arr = exp.trim().split(&apos;.&apos;) let val = vm arr.forEach(function (key) &#123; val = val[key] &#125;) Dep.target = null // // 上面获取val[key]的时候会调用get方法, 因此使用完毕之后需要把该属性置为null&#125; 重写数据劫持get和set方法 解:当获取值的时候就会自动调用get方法，于是我们去找一下数据劫持那里的get方法123456789101112131415161718192021222324252627// TODO:3.观察者function Observe(obj)&#123; // TODO:创建桥梁 let dep = new Dep() for (let key in obj) &#123; let val = obj[key] // TODO:深度劫持 observe(val) Object.defineProperty(obj,key,&#123; enumerable : true, get()&#123; // TODO:将watcher添加到订阅事件中 [watcher] Dep.target &amp;&amp; dep.addSub(Dep.target) return val &#125;, set(newVal)&#123; // 更改值得时候 if (newVal === val) return // 设置的值和以前的是一样的东西 val = newVal // 如果以后在获取值的时候将刚才设置的值丢回去 // TODO:深度劫持 observe(newVal) // TODO:执行update方法 dep.notify() &#125; &#125;) &#125;&#125; 修改watcher的update方法 解:当set修改值的时候执行了dep.notify方法，这个方法是执行watcher的update方法，那么我们再对update进行修改一下1234567891011Watcher.prototype.update = function () &#123; //调用fn() this.fn() // notify的时候值已经更改了 // 再通过vm, exp来获取新的值 let arr = this.exp.trim().split(&apos;.&apos;) let val = this.vm arr.forEach(function(key)&#123; val = val[key] &#125;) this.fn(val) // 将每次拿到的新值去替换&#123;&#123;&#125;&#125;的内容即可&#125; 问题:双向数据绑定","categories":[],"tags":[]},{"title":"标准网页标签模板及其每个标签的作用","slug":"标准网页标签模板及其每个标签的作用","date":"2019-10-12T15:06:27.000Z","updated":"2019-10-13T02:45:49.820Z","comments":true,"path":"2019/10/12/标准网页标签模板及其每个标签的作用/","link":"","permalink":"http://yoursite.com/2019/10/12/标准网页标签模板及其每个标签的作用/","excerpt":"","text":"123456789101112131415161718192021222324252627282930&lt;!DOCTYPE html&gt; + 声明文档的解析类型(document.compatMode)，避免浏览器的怪异模式。 + 通过document.compatMode查看模式： + BackCompat：怪异模式，浏览器使用自己的怪异模式解析渲染页面。 + CSS1Compat：标准模式，浏览器使用W3C的标准解析渲染页面。 &lt;html lang=&quot;en/zh-CN&quot;&gt; + lang=&quot;en&quot; 向搜索引擎表示该页面是html语言，并且语言为英文网站,并提示浏览器是否进行翻译 + lang=&quot;zh-CN&quot; 向搜索引擎表示该页面是html语言，并且语言为中文网站&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;/&gt; + 声明文档使用的字符编码&lt;meta name=&quot;viewport&quot;content=&quot;width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,user-scalable=no&quot;&gt; + 移动端布局&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;/&gt; + 告诉IE浏览器，IE8/9及以后的版本都会以最高版本IE来渲染页面或告诉浏览器用chrome内核来渲染&lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot;/&gt; + 指定双核浏览器默认以何种方式渲染页面&lt;title&gt;&lt;/title&gt; + 标题&lt;meta name=&quot;description&quot; content=&quot;#[[$description$]]#&quot;/&gt; + 描述&lt;meta name=&quot;keyword&quot; content=&quot;#[[$keyword$]]#&quot;/&gt; + 关键字&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;&quot;&gt;&lt;style type=&quot;text/css&quot;&gt;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;&lt;/script&gt;&lt;/body&gt;","categories":[],"tags":[]},{"title":"前端高度塌陷问题","slug":"前端高度塌陷问题","date":"2019-10-12T07:22:43.000Z","updated":"2019-10-13T02:36:48.264Z","comments":true,"path":"2019/10/12/前端高度塌陷问题/","link":"","permalink":"http://yoursite.com/2019/10/12/前端高度塌陷问题/","excerpt":"一.产生原因 在文档流中，父元素的高度默认是被子元素撑开的，也就是子元素多高，父元素就多高。但是当为子元素设置浮动以后，子元素会完全脱离文档流，此时将会导致子元素无法撑起父元素的高度，导致父元素的高度塌陷。由于父元素的高度塌陷了，则父元素下的所有元素都会向上移动，这样将会导致页面布局混乱。","text":"一.产生原因 在文档流中，父元素的高度默认是被子元素撑开的，也就是子元素多高，父元素就多高。但是当为子元素设置浮动以后，子元素会完全脱离文档流，此时将会导致子元素无法撑起父元素的高度，导致父元素的高度塌陷。由于父元素的高度塌陷了，则父元素下的所有元素都会向上移动，这样将会导致页面布局混乱。 二.所以在开发中一定要避免出现高度塌陷的问题, 1.我们可以将父元素的高度写死，以避免塌陷的问题出现， 但是一旦高度写死，父元素的高度将不能自动适应子元素的高度，所以这种方案是不推荐使用的。 2.根据W3C的标准，在页面中元素都一个隐含的属性叫做Block Formatting Context简称BFC，该属性可以设置打开或者关闭，默认是关闭的。 (1)当开启元素的BFC以后，元素将会具有如下的特性： 父元素的垂直外边距不会和子元素重叠 开启BFC的元素不会被浮动元素所覆盖 开启BFC的元素可以包含浮动的子元素 (2)如何开启元素的BFC 设置元素浮动 1使用这种方式开启，虽然可以撑开父元素，但是会导致父元素的宽度丢失而且使用这种方式也会导致下边的元素上移，不能解决问题 设置元素绝对定位 设置元素为inline-block 1可以解决问题，但是会导致宽度丢失，不推荐使用这种方式 将元素的overflow设置为一个非visible的值 123456推荐方式：将overflow设置为hidden是副作用最小的开启BFC的方式,但是在IE6及以下的浏览器中并不支持BFC，所以使用这种方式不能兼容IE6。在IE6中虽然没有BFC，但是具有另一个隐含的属性叫做hasLayout，属性的作用和BFC类似，所在IE6浏览器可以通过开hasLayout来解决该问题开启方式很多，我们直接使用一种副作用最小的： 直接将元素的zoom设置为1即可 zoom表示放大的意思，后边跟着一个数值，写几就将元素放大几倍 zoom:1表示不放大元素，但是通过该样式可以开启hasLayout zoom这个样式，只在IE中支持，其他浏览器都不支持 最终兼容方案 1234.clearfix&#123; overflow: hidden; zoom:1;&#125; 3.通过在高度塌陷的父元素的最后，添加一个空白的div,然后在对其进行清除浮动,但会在页面中添加多余结构 由于这个div并没有浮动，所以他是可以撑开父元素的高度的，然后在对其进行清除浮动，这样可以通过这个空白的div来撑开父元素的高度，基本没有副作用,使用这种方式虽然可以解决问题，但是会在页面中添加多余的结构。 最终方案123.clearfix&#123; clear: both;&#125; 4.通过after伪类在高度塌陷的父元素的最后,添加一个空白的块元素，然后对其清除浮动，不会再页面中添加多余结构 这样做和添加一个div的原理一样，可以达到一个相同的效果，而且不会在页面中添加多余的div，这是我们最推荐使用的方式，几乎没有副作用 12345678 .clearfix:after&#123; // 添加一个内容 content: &quot;&quot;; // 转换为一个块元素 display: block; // 清除两侧的浮动 clear: both;&#125; 在IE6中不支持after伪类,所以在IE6中还需要使用hasLayout来处理12345678.clearfix&#123; zoom:1;&#125;.clearfix:after&#123; content: &quot;&quot;; display: block; clear: both;&#125; 5.子元素和父元素相邻的垂直外边距会发生重叠，子元素的外边距会传递给父元素,使用空的table标签可以隔离父子元素的外边距，阻止外边距的重叠 解决父子元素的外边距重叠 1234.box1:before&#123; content: &quot;&quot;; display:table可以将一个元素设置为表格显示&#125; 解决父元素高度塌陷 12345678.clearfix&#123; zoom:1;&#125;.clearfix:after&#123; content: &quot;&quot;; display: block; clear: both;&#125; 经过修改后的clearfix是一个多功能的既可以解决高度塌陷，又可以确保父元素和子元素的垂直外边距不会重叠 123456789.clearfix&#123; zoom: 1;&#125;.clearfix:before,.clearfix:after&#123; content: &quot;&quot;; display: table; clear: both;&#125;","categories":[],"tags":[]},{"title":"了解Object.defineProperty()方法","slug":"了解Object-defineProperty-方法","date":"2019-10-10T15:44:19.000Z","updated":"2019-10-13T02:38:58.469Z","comments":true,"path":"2019/10/10/了解Object-defineProperty-方法/","link":"","permalink":"http://yoursite.com/2019/10/10/了解Object-defineProperty-方法/","excerpt":"Object.defineProperty(obj,prop,descriptor)1.参数 obj 要在其上定义属性的对象。 prop 要定义或修改的属性的名称。 descriptor 将被定义或修改的属性描述符。 2.返回值 被传递给函数的对象obj","text":"Object.defineProperty(obj,prop,descriptor)1.参数 obj 要在其上定义属性的对象。 prop 要定义或修改的属性的名称。 descriptor 将被定义或修改的属性描述符。 2.返回值 被传递给函数的对象obj 3.属性描述符 configurable // 可删除 enumerable // 可枚举 writable // 可赋值 value get // 访问 set // 修改 注意: value和writable与get和set不能共存 obj.prop 调用get方法 obj.prop = ‘xxx’ 调用set方法","categories":[],"tags":[]},{"title":"NVM_Node_NPM_CNPM安装","slug":"NVM-Node-NPM-CNPM安装","date":"2019-10-10T05:36:11.000Z","updated":"2019-10-10T12:32:30.867Z","comments":true,"path":"2019/10/10/NVM-Node-NPM-CNPM安装/","link":"","permalink":"http://yoursite.com/2019/10/10/NVM-Node-NPM-CNPM安装/","excerpt":"NVM-windows安装第一步:下载NVM安装包:https://github.com/coreybutler/nvm-windows/releases第二步:创建俩个文件目录,解压安装包到NVM目录中:D:\\NVMD:\\Node","text":"NVM-windows安装第一步:下载NVM安装包:https://github.com/coreybutler/nvm-windows/releases第二步:创建俩个文件目录,解压安装包到NVM目录中:D:\\NVMD:\\Node 第三步:进入NVM目录双击 install.cmd 直接回车第四步:修改setting.txt文件复制到D:\\NVM目录中root: D:\\NVMpath: D:\\Nodearch: 64proxy: nonenode_mirror: http://npm.taobao.org/mirrors/node/npm_mirror: https://npm.taobao.org/mirrors/npm/第五步:配置环境变量NVM_HOME和NVM_SYMLINKNVM_HOME : D:\\NVMNVM_SYMLINK : D:\\Node第六步:path中添加变量%NVM_HOME%%NVM_SYMLINK%第七步:查看NVM版本信息nvm -vNode-windows安装第一步:安装Node(为了后续安装全局npm准备)nvm install 6.15.0第二步:使用Nodenvm use 6.15.0第三步:在nvm\\node_dir下创建node_cache和node_global文件加第四步配置缓冲路径和全局路径(使C:\\Users\\yi081.npmrc 】文件重新生成)npm config set prefix “D:\\NVM\\node_dir\\node_global”npm config set cache “D:\\NVM\\node_dir\\node_cache”第五步:配置Node环境变量NODE_HOME和NODE_PATHNODE_HOME:D:\\Node\\node_modulesNODE_GLOBAL:D:\\NVM\\node_dir\\node_global (可不配置)NODE_PATH : D:\\NVM\\node_dir\\node_global\\node_modules第六步:添加到path中%NODE_HOME%%NODE_GLOBAL% (可不配置)%NODE_PATH%全局安装NPM第一步:下载npmnpm install npm@latest -g第二步:配置NPM环境变量NPM_HOME : D:\\NVM\\node_dir\\node_global\\npm第三步:添加到path中%NPM_HOME%全局安装CNPM第一步:下载cnpmnpm install -g cnpm –registry=https://registry.npm.taobao.org第二步:配置CNPM环境变量(可不配置)CNPM_HOME : D:\\NVM\\node_dir\\node_global\\cnpm第三步:添加到path中(可不配置)%NPM_HOME%","categories":[],"tags":[]}]}